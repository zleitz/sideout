import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { signIn, useSession, signOut } from "next-auth/react";
import { useSelect } from "../hooks/useSelect";
import Link from "next/link";
import useInput from "../hooks/useInput";

const Home: NextPage = () => {
  const { data: session, status } = useSession();
  const ctx = trpc.useContext();
  const { data: surfaceTypes } = trpc.useQuery([
    "tournament.getTournamentSurfaceTypes",
  ]);
  const { data: tournamentTypes } = trpc.useQuery([
    "tournament.getTournamentTypes",
  ]);

  const createTournament = trpc.useMutation("tournament.createTournament", {
    onMutate: () => {
      ctx.cancelQuery(["tournament.getAll"]);

      const optimisticUpdate = ctx.getQueryData(["tournament.getAll"]);
      if (optimisticUpdate) {
        ctx.setQueryData(["tournament.getAll"], optimisticUpdate);
      }
    },
    onSettled: () => {
      ctx.invalidateQueries(["tournament.getAll"]);
    },
  });
  const {
    state: tournamentName,
    handleChange: handleTournamentNameChange,
    clear: clearTournamentName,
  } = useInput("");
  const {
    state: location,
    handleChange: handleLocationChange,
    clear: clearLocation,
  } = useInput("");
  const {
    state: rounds,
    handleChange: handleRoundsChange,
    clear: clearRounds,
  } = useInput("");
  const {
    select: surfaceSelect,
    handleSelectChange: handleSurfaceSelectChange,
  } = useSelect("");
  const {
    select: tournamentTypeSelect,
    handleSelectChange: handleTournamentTypeSelectChange,
  } = useSelect("");

  if (status === "loading") {
    return <main>Loading...</main>;
  }
  return (
    <>
      <Head>
        <title>Sideout! - Run volleyball tournaments!</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {session ? (
          <div>
            <p>Hello {session.user?.name}</p>
            <button
              onClick={() => {
                signOut();
              }}
            >
              Logout
            </button>
            <Tournaments />

            <div className="pt-6">
              <form
                className="flex gap-2"
                onSubmit={(event) => {
                  event.preventDefault();

                  createTournament.mutate({
                    tournamentName,
                    location,
                    surfaceType: surfaceSelect,
                    tournamentType: tournamentTypeSelect,
                    numberOfRounds: Number(rounds),
                  });

                  clearTournamentName();
                  clearLocation();
                  clearRounds();
                }}
              >
                <input
                  type="text"
                  value={tournamentName}
                  placeholder="Tournament Name"
                  maxLength={100}
                  onChange={handleTournamentNameChange}
                  className="px-4 py-2 rounded-md border-2 border-zinc-800 bg-neutral-900 focus:outline-none"
                />
                <input
                  type="text"
                  value={location}
                  placeholder="Location"
                  maxLength={100}
                  onChange={handleLocationChange}
                  className="px-4 py-2 rounded-md border-2 border-zinc-800 bg-neutral-900 focus:outline-none"
                />
                <select
                  value={surfaceSelect}
                  onChange={handleSurfaceSelectChange}
                >
                  {surfaceTypes?.map((type) => {
                    return (
                      <option key={type.id} value={type.id}>
                        {type.surfaceType}
                      </option>
                    );
                  })}
                </select>
                <select
                  value={tournamentTypeSelect}
                  onChange={handleTournamentTypeSelectChange}
                >
                  {tournamentTypes?.map((type) => {
                    return (
                      <option key={type.id} value={type.id}>
                        {type.tournamentType}
                      </option>
                    );
                  })}
                </select>
                <input
                  type="number"
                  max={5}
                  value={rounds}
                  onChange={handleRoundsChange}
                />

                <button
                  type="submit"
                  className="p-2 rounded-md border-2 border-zinc-800 focus:outline-none"
                >
                  Submit
                </button>
              </form>
            </div>
          </div>
        ) : (
          // <button
          //   onClick={() => {
          //     signIn("google");
          //   }}
          // >
          //   Login with Google
          // </button>
          <div className="flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8">
            <div className="sm:mx-auto sm:w-full sm:max-w-md">
              <svg
                className="mx-auto h-20 w-auto"
                width="700pt"
                height="700pt"
                version="1.1"
                viewBox="0 0 700 700"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g fillRule="evenodd">
                  <path d="m350 29.168c-138.44 0-250.83 112.4-250.83 250.83 0 138.44 112.4 250.83 250.83 250.83 138.44 0 250.83-112.4 250.83-250.83 0-138.44-112.4-250.83-250.83-250.83zm0 35c119.12 0 215.83 96.715 215.83 215.83s-96.715 215.83-215.83 215.83-215.83-96.715-215.83-215.83 96.715-215.83 215.83-215.83z" />
                  <path d="m335.09 37.496c-51.637 83.883-51.543 167.77 0 251.67 5.0625 8.2148 15.844 10.805 24.078 5.7383 8.2148-5.0625 10.805-15.844 5.7383-24.078-44.031-71.656-44.125-143.31 0-214.99 5.0625-8.2148 2.4961-19.016-5.7383-24.078-8.2148-5.0625-19.016-2.4961-24.078 5.7383z" />
                  <path d="m207.69 85.285c-42.188 106.45-26.273 202.65 47.344 288.7 6.2773 7.3281 17.336 8.1914 24.688 1.9141 7.3281-6.2773 8.1914-17.336 1.9141-24.664-64.516-75.414-78.398-159.76-41.418-253.07 3.5703-8.9844-0.83984-19.156-9.8242-22.703-8.9844-3.5703-19.156 0.83984-22.703 9.8242z" />
                  <path d="m147.44 414.17c98.465 2.7773 171.06-39.246 217.96-125.84 4.5977-8.4922 1.4219-19.109-7.0703-23.73-8.4922-4.5977-19.109-1.4219-23.73 7.0703-40.039 73.965-102.06 109.88-186.18 107.5-9.6602-0.25781-17.711 7.3516-17.988 17.012-0.28125 9.6602 7.3516 17.711 17.012 17.988z" />
                  <path d="m266.35 513.03c109.74-19.297 182.46-82.691 218.26-190.1 3.0586-9.1719-1.9141-19.086-11.059-22.145-9.1719-3.0586-19.086 1.9141-22.145 11.059-31.359 94.102-94.965 149.8-191.12 166.69-9.5195 1.6797-15.891 10.758-14.211 20.277 1.6797 9.5195 10.758 15.867 20.277 14.211z" />
                  <path d="m567.46 388.34c-46.828-86.66-119.51-128.52-217.96-125.84-9.6367 0.28125-17.266 8.3281-17.012 17.988 0.28125 9.6367 8.3281 17.266 17.988 17.012 84.07-2.3086 146.18 33.438 186.18 107.5 4.5977 8.4922 15.238 11.668 23.73 7.0703s11.668-15.215 7.0703-23.73z" />
                  <path d="m591.01 254.92c-71.516-85.098-162.68-116.25-273.44-93.59-9.4492 1.9375-15.562 11.199-13.625 20.648 1.9375 9.4727 11.199 15.586 20.648 13.648 97.043-19.855 176.96 7.2578 239.63 81.809 6.207 7.3984 17.266 8.3516 24.641 2.125 7.3984-6.207 8.3516-17.266 2.1484-24.641z" />
                </g>
              </svg>
              <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
                Sign in to Sideout!
              </h2>
            </div>

            <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
              <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
                <div>
                  <button
                    onClick={() => {
                      signIn("google");
                    }}
                    className="flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                  >
                    Sign in with Google
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </>
  );
};

const Tournaments = () => {
  const { data: tournaments, isLoading } = trpc.useQuery(["tournament.getAll"]);
  const { data: userTournaments, isLoading: isLoadingUserTournaments } =
    trpc.useQuery(["tournament.getAuthedUserTournaments"]);

  if (isLoading || isLoadingUserTournaments)
    return <div>Fetching tournies...</div>;

  return (
    <div className="flex flex-col gap-4">
      {tournaments?.map((t, index) => {
        return (
          <Link href={`/tournament/${t.id}`} key={index}>
            <a>{t.tournamentName}</a>
          </Link>
        );
      })}
      <div>
        THESE ARE TOURNAMENTS YOU HAVE / ARE RUNNING
        {userTournaments?.map((t, index) => {
          return (
            <Link href={`/tournament/${t.id}`} key={index}>
              <a>{t.tournamentName}</a>
            </Link>
          );
        })}
      </div>
    </div>
  );
};
export default Home;
