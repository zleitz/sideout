import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { signIn, useSession, signOut } from "next-auth/react";
import { useSelect } from "../hooks/useSelect";
import Link from "next/link";
import useInput from "../hooks/useInput";

const Home: NextPage = () => {
  const { data: session, status } = useSession();
  const ctx = trpc.useContext();
  const { data: surfaceTypes } = trpc.useQuery([
    "tournament.getTournamentSurfaceTypes",
  ]);
  const { data: tournamentTypes } = trpc.useQuery([
    "tournament.getTournamentTypes",
  ]);

  const createTournament = trpc.useMutation("tournament.createTournament", {
    onMutate: () => {
      ctx.cancelQuery(["tournament.getAll"]);

      const optimisticUpdate = ctx.getQueryData(["tournament.getAll"]);
      if (optimisticUpdate) {
        ctx.setQueryData(["tournament.getAll"], optimisticUpdate);
      }
    },
    onSettled: () => {
      ctx.invalidateQueries(["tournament.getAll"]);
    },
  });
  const {
    state: tournamentName,
    handleChange: handleTournamentNameChange,
    clear: clearTournamentName,
  } = useInput("");
  const {
    state: location,
    handleChange: handleLocationChange,
    clear: clearLocation,
  } = useInput("");
  const {
    state: rounds,
    handleChange: handleRoundsChange,
    clear: clearRounds,
  } = useInput("");
  const {
    select: surfaceSelect,
    handleSelectChange: handleSurfaceSelectChange,
  } = useSelect("");
  const {
    select: tournamentTypeSelect,
    handleSelectChange: handleTournamentTypeSelectChange,
  } = useSelect("");

  if (status === "loading") {
    return <main>Loading...</main>;
  }
  return (
    <>
      <Head>
        <title>Sideout! - Run volleyball tournaments!</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {session ? (
          <div>
            <p>Hello {session.user?.name}</p>
            <button
              onClick={() => {
                signOut();
              }}
            >
              Logout
            </button>
            <Tournaments />

            <div className="pt-6">
              <form
                className="flex gap-2"
                onSubmit={(event) => {
                  event.preventDefault();

                  createTournament.mutate({
                    tournamentName,
                    location,
                    surfaceType: surfaceSelect,
                    tournamentType: tournamentTypeSelect,
                    numberOfRounds: Number(rounds),
                  });

                  clearTournamentName();
                  clearLocation();
                  clearRounds();
                }}
              >
                <input
                  type="text"
                  value={tournamentName}
                  placeholder="Tournament Name"
                  maxLength={100}
                  onChange={handleTournamentNameChange}
                  className="px-4 py-2 rounded-md border-2 border-zinc-800 bg-neutral-900 focus:outline-none"
                />
                <input
                  type="text"
                  value={location}
                  placeholder="Location"
                  maxLength={100}
                  onChange={handleLocationChange}
                  className="px-4 py-2 rounded-md border-2 border-zinc-800 bg-neutral-900 focus:outline-none"
                />
                <select
                  value={surfaceSelect}
                  onChange={handleSurfaceSelectChange}
                >
                  {surfaceTypes?.map((type) => {
                    return (
                      <option key={type.id} value={type.id}>
                        {type.surfaceType}
                      </option>
                    );
                  })}
                </select>
                <select
                  value={tournamentTypeSelect}
                  onChange={handleTournamentTypeSelectChange}
                >
                  {tournamentTypes?.map((type) => {
                    return (
                      <option key={type.id} value={type.id}>
                        {type.tournamentType}
                      </option>
                    );
                  })}
                </select>
                <input
                  type="number"
                  max={5}
                  value={rounds}
                  onChange={handleRoundsChange}
                />

                <button
                  type="submit"
                  className="p-2 rounded-md border-2 border-zinc-800 focus:outline-none"
                >
                  Submit
                </button>
              </form>
            </div>
          </div>
        ) : (
          <button
            onClick={() => {
              signIn("google");
            }}
          >
            Login with Google
          </button>
        )}
      </main>
    </>
  );
};

const Tournaments = () => {
  const { data: tournaments, isLoading } = trpc.useQuery(["tournament.getAll"]);
  const { data: userTournaments, isLoading: isLoadingUserTournaments } =
    trpc.useQuery(["tournament.getAuthedUserTournaments"]);

  if (isLoading || isLoadingUserTournaments)
    return <div>Fetching tournies...</div>;

  return (
    <div className="flex flex-col gap-4">
      {tournaments?.map((t, index) => {
        return (
          <Link href={`/tournament/${t.id}`} key={index}>
            <a>{t.tournamentName}</a>
          </Link>
        );
      })}
      <div>
        THESE ARE TOURNAMENTS YOU HAVE / ARE RUNNING
        {userTournaments?.map((t, index) => {
          return (
            <Link href={`/tournament/${t.id}`} key={index}>
              <a>{t.tournamentName}</a>
            </Link>
          );
        })}
      </div>
    </div>
  );
};
export default Home;
