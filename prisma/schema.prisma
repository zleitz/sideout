// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String       @id @default(cuid())
    name           String?
    email          String?      @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    tournamentsRan Tournament[] @relation("TournamentsRan")
    teams          Team[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tournament {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    startDate         DateTime
    endDate           DateTime
    tournamentName    String
    location          String
    organizer         User?                       @relation("TournamentsRan", fields: [organizerId], references: [id])
    organizerId       String?
    numberOfRounds    Int
    surfaceType       SurfaceType                 @relation(fields: [surfaceTypeId], references: [id])
    surfaceTypeId     String
    playingCategories TournamentPlayingCategory[]
    tournamentType    TournamentType              @relation(references: [id], fields: [tournamentTypeId])
    tournamentTypeId  String
}

model TournamentType {
    id String @id @default(cuid())

    tournamentType String       @db.VarChar(30)
    Tournament     Tournament[]
}

model Player {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    firstName    String
    lastName     String
    gender       String         @db.Char(1)
    dateOfBirth  DateTime
    hometown     String
    Registration Registration[]
}

model Team {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    name      String
    captain   User   @relation(fields: [captainId], references: [id])
    captainId String
}

model SurfaceType {
    id          String       @id @default(cuid())
    surfaceType String       @db.VarChar(50)
    Tournament  Tournament[]
}

model PlayingCategory {
    id                        String                     @id @default(cuid())
    categoryName              String                     @db.VarChar(50)
    TournamentPlayingCategory TournamentPlayingCategory?
}

model TournamentPlayingCategory {
    id                String          @id @default(cuid())
    tournament        Tournament      @relation(fields: [tournamentId], references: [id])
    tournamentId      String
    playingCategory   PlayingCategory @relation(fields: [playingCategoryId], references: [id])
    playingCategoryId String          @unique
    Fixture           Fixture[]
}

model PlayingIn {
    id             String       @id @default(cuid())
    registration   Registration @relation(fields: [registrationId], references: [id])
    registrationId String
    seed           Int
}

model Registration {
    id               String      @id @default(cuid())
    player           Player      @relation(fields: [playerId], references: [id])
    playerId         String
    registrationDate DateTime    @default(now())
    PlayingIn        PlayingIn[]
}

model Fixture {
    id                          String                    @id @default(cuid())
    tournamentPlayingCategory   TournamentPlayingCategory @relation(fields: [tournamentPlayingCategoryId], references: [id])
    tournamentPlayingCategoryId String
    round                       Int
    // firstRegistration           Registration              @relation("firstRegistration", fields: [firstRegistrationId], references: [id])
    // firstRegistrationId         String
    // secondRegistration Registration @relation("secondRegistration", fields: [secondRegistrationId], references: [id])
    // secondRegistrationId String
    FixtureResult               FixtureResult[]
}

model FixtureResult {
    fixture   Fixture @relation(fields: [fixtureId], references: [id])
    fixtureId String  @id
}
